#!/usr/bin/env bash

set -o errexit
set -o nounset

# NB: can't put this in common.bash since finding
# common.bash depends on it
# http://www.ostricher.com/2014/10/the-right-way-to-get-the-directory-of-a-bash-script/
function get_scriptpath
{
    local sdir='unset'
    local target='unset'
    local bsrc="${BASH_SOURCE[0]}"
    while [[ -h $bsrc ]]
    do
        target="$(readlink $bsrc)"
        if [[ $target == /* ]]
        then
            bsrc="$target"
        else
            sdir="$(dirname $bsrc)"
            bsrc="$sdir/$target"
        fi
    done
    echo "$(cd -P $(dirname $bsrc) && pwd)"
}

unset CDPATH
declare -r script_path="$(get_scriptpath)"
export PATH="$PATH:$script_path"
source "$script_path/common.bash"

declare -r default_dev_cluster_path="$HOME/Projects/basho/riak/dev"
declare -ri default_monkey_count=1

function usage
{
    echo "
chaos-monkey: Monkey with your devrel

Usage: chaos-monkey [-p <riak_dev_path>] [-m <monkey_count>]

-p    Riak dev path (Default: \"$default_dev_cluster_path\")
-m    Monkey count, i.e. number of nodes to take down at any given time
      (Default: \"$default_monkey_count\")
"
    exit 0
}

while getopts "hp:m:" opt; do
    case $opt in
        p)
            declare -r opt_dev_cluster_path="$OPTARG";;
        m)
            declare -ri opt_monkey_count="$OPTARG";;
        *)
            usage;;
    esac
done

declare -r dev_cluster_path="${opt_dev_cluster_path:-$default_dev_cluster_path}"
declare -ri monkey_count="${opt_monkey_count:-$default_monkey_count}"

if [[ ! -d $dev_cluster_path ]]
then
    errexit "Dev cluster path $dev_cluster_path does not exist!"
fi

pushd $dev_cluster_path > /dev/null
declare -ir dev_node_count="$(get_dev_node_count)"

if (( monkey_count >= dev_node_count ))
then
    errexit "Maximum monkey count is $(( dev_node_count - 1 ))"
fi

declare -i i=0
while (true)
do
    declare -a nodes
    for (( i = 0; i < monkey_count; i++ ))
    do
        devn="dev$(((RANDOM % dev_node_count) + 1))"
        riak_admin="$devn/bin/riak-admin"
        if [[ ! -x $riak_admin ]]
        then
            errexit "riak-admin not found in $riak_admin"
        fi

        if $devn/bin/riak ping
        then
            pinfo "monkeying around with $devn in $dev_cluster_path"
            echo Stopping $devn...
            "$devn/bin/riak" stop
            nodes[$i]="$devn"
        else
            # Re-do
            (( i-- ))
        fi
    done

    echo Sleeping 10 seconds...
    sleep 10

    for devn in ${nodes[@]}
    do
        echo Starting $devn...
        "$devn/bin/riak" start
    done
    
    echo Setting transfer-limit 16...
    "$devn/bin/riak-admin" transfer-limit 16

    wait_for_transfers

    echo Sleeping 30 seconds...
    sleep 30
done
