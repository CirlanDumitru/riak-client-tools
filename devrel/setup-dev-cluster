#!/usr/bin/env bash

set -o errexit
set -o nounset

# NB: can't put this in common.bash since finding
# common.bash depends on it
# http://www.ostricher.com/2014/10/the-right-way-to-get-the-directory-of-a-bash-script/
function get_scriptpath
{
    local sdir='unset'
    local target='unset'
    local bsrc="${BASH_SOURCE[0]}"
    while [[ -h $bsrc ]]
    do
        target="$(readlink $bsrc)"
        if [[ $target == /* ]]
        then
            bsrc="$target"
        else
            sdir="$(dirname $bsrc)"
            bsrc="$sdir/$target"
        fi
    done
    echo "$(cd -P $(dirname $bsrc) && pwd)"
}

unset CDPATH
declare -r script_path="$(get_scriptpath)"
export PATH="$PATH:$script_path"
source "$script_path/common.bash"

# Defaults
declare -i i=0
declare riak_admin='dev1/bin/riak-admin' # NB: will be set below
declare -r default_dev_cluster_path="$HOME/Projects/basho/riak/dev"
# Option vars
opt_strong_consistency='false'
opt_search='on' # NB: yz search on / off
opt_legacy_search='false'
opt_use_security='false'
opt_cleanup_only='false'
declare -i opt_delay_riak_ops=0

function maybe_sleep
{
    if (( opt_delay_riak_ops > 0 ))
    then
        sleep $opt_delay_riak_ops
    fi
}

function usage
{
    echo "
setup-dev-cluster: Quickly setup a dev Riak cluster.

Usage:

setup-dev-cluster [-p <riak dev path>] [-d <secs>] [-clsxz]

-p      Riak dev path (Default: \"$default_dev_cluster_path\")
-d      Delay Riak operations (Default: $opt_delay_riak_ops seconds)
-c      Set up cluster for Strong Consistency (NB: use at least 5 nodes)
-l      Set up cluster to use Legacy Search instead of Yokozuna Search
-s      Set up cluster to use Riak Security
-x      Shut down any nodes and clean up directories.
-z      Set up cluster WITHOUT Yokozuna Search (Default: $opt_search)
"
    exit 0
}

while getopts "hclsxzp:d:" opt; do
    case $opt in
        p)
            opt_dev_cluster_path="$OPTARG";;
        d)
            opt_delay_riak_ops="$OPTARG";;
        c)
            opt_strong_consistency='true';;
        l)
            opt_legacy_search='true';;
        s)
            opt_use_security='true';;
        x)
            opt_cleanup_only='true';;
        z)
            opt_search='off';;
        *)
            usage;;
    esac
done

# NB: these are passed to scripts as args so they should be
# zero-length strings unless set to a path
security_cacert_file=''
security_cert_file=''
security_key_file=''
if [[ $opt_use_security == 'true' ]]
then
    pinfo 'NOTE: using Riak Security. This will require HTTPS and TLS connections.'
    declare -r ca_path="$(cd -P "$script_path/../test-ca" && pwd)";
    if [[ -d $ca_path ]]
    then
        security_cacert_file="$ca_path/certs/cacert.pem"
        security_cert_file="$ca_path/certs/riak-test-cert.pem"
        security_key_file="$ca_path/private/riak-test-key.pem"
        for file in $security_cacert_file $security_cert_file $security_key_file
        do
            if [[ ! -f $file  ]]
            then
                errexit "missing security file: $file"
            fi
        done
        pinfo "Using certificates in $ca_path"
    else
        errexit 'missing CA directory'
    fi
fi

declare -r dev_cluster_path="${opt_dev_cluster_path:-$default_dev_cluster_path}"

if [[ ! -d $dev_cluster_path ]]
then
    errexit "Dev cluster path $dev_cluster_path does not exist!"
fi

pushd $dev_cluster_path > /dev/null
get_dev_node_count

pinfo "Setting up dev cluster in $dev_cluster_path"

if [[ $opt_strong_consistency == 'true' ]]
then
    pinfo 'Setting up dev cluster with Strong Consistency'
fi

if [[ $opt_legacy_search == 'true' ]]
then
    pinfo "Setting up dev cluster with Legacy Search"
fi

if [[ $opt_search == 'off' ]]
then
    pinfo "Setting up dev cluster WITHOUT Yokozuna Search"
fi

pinfo "Stopping Riak"

set +o errexit
for devdir in dev*
do
    pinfo "Stopping $devdir"
    $devdir/bin/riak stop > /dev/null &
done

wait

pinfo "Removing old Riak data"

for datadir in dev*/data/*
do
    find $datadir -type f -delete
done
for logdir in dev*/log
do
    find $logdir -type f -delete
done
for yz_temp in dev*/data/yz_temp
do
    rm -rf $yz_temp
done
set -o errexit

if [[ $opt_cleanup_only == 'true' ]]; then
    exit 0;
fi

declare -i pb_port=10017
declare -i http_port=10018

if [[ $opt_use_security == 'true' ]]
then
    declare -i https_port=10418
else
    declare -i https_port=0
fi

pinfo "Configuring riak.conf"

for devdir in dev*
do
    adv_conf="$devdir/etc/advanced.config"
    riak_conf="$devdir/etc/riak.conf"
    riak_conf_orig="$devdir/etc/riak.conf.orig"
    if [[ -f $riak_conf_orig ]]
    then
        cp -f $riak_conf_orig $riak_conf
    else
        cp -f $riak_conf $riak_conf_orig
    fi

    gen-riak-conf "$riak_conf" $http_port $pb_port $https_port \
        "$security_cacert_file" "$security_cert_file" "$security_key_file" \
        "$dev_node_count" "$opt_search"

    gen-adv-conf $adv_conf

    if [[ $opt_legacy_search == 'true' ]]
    then
        legacy-search-conf $riak_conf $adv_conf
    fi

    if [[ $opt_strong_consistency == 'true' ]]
    then
        strong-consistency-conf $riak_conf
    fi

    (( pb_port += 10 ))
    (( http_port += 10 ))

    if [[ $opt_use_security == 'true' ]]
    then
        (( https_port += 10 ))
    else
        https_port=0
    fi
done

pinfo "Starting Riak"

for devdir in dev*
do
    pinfo "Starting $devdir"
    ($devdir/bin/riak start; maybe_sleep) &
done

wait

is_first='true'
first_node_name='dev1@127.0.0.1'
for devdir in dev*
do
    if [[ $is_first == 'true' ]]
    then
        pdebug "Skipping join for $devdir"
        first_node_name="$devdir@127.0.0.1"
        riak_admin="$devdir/bin/riak-admin"
        is_first='false'
    else
        pinfo "Joining $devdir"
        pdebug "$devdir/bin/riak-admin cluster join \"$first_node_name\""
        ($devdir/bin/riak-admin cluster join "$first_node_name"; maybe_sleep) &
    fi
done

wait

$riak_admin cluster plan
$riak_admin cluster commit
$riak_admin transfer-limit 16

wait_for_transfers

pinfo "Riak started, setting up bucket types"
riak-cluster-config "$riak_admin" 10018 "$opt_strong_consistency" "$opt_use_security"
pinfo "Done!"

