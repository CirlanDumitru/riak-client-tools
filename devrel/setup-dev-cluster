#!/usr/bin/env bash

set -o errexit
set -o nounset

# NB: can't put this in common.bash since finding
# common.bash depends on it
function get_realpath
{
    local path="$1"
    if hash realpath 2>/dev/null
    then
        realpath "$path"
    else
        perl -e 'use Cwd q(abs_path);print abs_path(shift)' "$path"
    fi
}

# Defaults
declare -i i=0
declare -r riak_admin=dev1/bin/riak-admin
declare -r default_dev_cluster_path="$HOME/Projects/basho/riak/dev"
declare -ir default_node_count=1
declare -ir strong_consistency_node_count=4
# Option vars
opt_strong_consistency='false'
opt_legacy_search='false'
opt_use_security='false'
opt_default_backend='leveldb'
opt_cleanup_only='false'
declare -i opt_node_count=$default_node_count
declare -i opt_delay_riak_ops=0

script_dir="$(dirname $0)"
script_path="$(get_realpath $script_dir)"
export PATH="$PATH:$script_path"
source "$script_path/common.bash"

function transfers_in_progress
{
    local retval='in_progress'
    local transfers_out=$(make_temp_file riak-admin-transfers)

    $riak_admin transfers > $transfers_out 2>&1
    if grep -iqF 'Node is not running' $transfers_out
    then
        perr 'Riak transfers did not complete. Error!'
        retval='error' # Return error
    elif grep -iqF 'No transfers active' $transfers_out
    then
        retval='done' # No longer in progress
    else
        retval='in_progress' # Still in progress
    fi
    rm -f $transfers_out
    echo $retval
}

function wait_for_transfers
{
    sleep 5
    local transfer_status="$(transfers_in_progress)"
    while [[ $transfer_status == 'in_progress' ]]
    do
        pinfo 'Transfers in progress.'
        sleep 5
        transfer_status=$(transfers_in_progress)
    done
    pinfo "Transfer status: $transfer_status"

    if [[ $transfer_status == 'error' ]]
    then
        errexit 'Transfers errored!'
    fi
}

function usage
{
    echo "
setup-dev-cluster: Quickly setup a dev Riak cluster.

Usage: setup-dev-cluster [-p <riak dev path>] [-n <node count>] [-l] [-c] [-d <secs>]

-p      Riak dev path (Default: \"$default_dev_cluster_path\")
-n      Node count (Default: $default_node_count)
-l      Set up cluster to use Legacy Search instead of Yokozuna Search
-c      Set up cluster for Strong Consistency
        Note: overrides -n setting and requires at least $strong_consistency_node_count nodes
-s      Set up cluster to use Riak Security
-b      Default backend to use (Default: \"leveldb\", can be \"bitcask\")
-x      Shut down any nodes and clean up directories.
-d      Delay Riak operations (Default: $opt_delay_riak_ops seconds)
"
    exit 0
}

while getopts "hslcxb:p:n:d:" opt; do
    case $opt in
        l)
            opt_legacy_search='true';;
        p)
            opt_dev_cluster_path="$OPTARG";;
        n)
            opt_node_count="$OPTARG";;
        c)
            opt_strong_consistency='true';;
        s)
            opt_use_security='true';;
        b)
            opt_default_backend="$OPTARG";;
        x)
            opt_cleanup_only='true';;
        d)
            opt_delay_riak_ops="$OPTARG";;
        *)
            usage;;
    esac
done

default_backend='leveldb'
case $opt_default_backend in
    bitcask)
        default_backend='bitcask';;
    leveldb)
        default_backend='leveldb';;
    *)
        pinfo '-b argument must either be bitcask or leveldb.'
        usage;;
esac

if [[ $opt_use_security == 'true' ]]
then
    pinfo 'NOTE: using Riak Security. This will require HTTPS and TLS connections.'
    declare -r ca_path="$(get_realpath $script_path/../)";
    security_cacert_file="$ca_path/test-ca/certs/cacert.pem"
    security_cert_file="$ca_path/test-ca/certs/riak-test-cert.pem"
    security_key_file="$ca_path/test-ca/private/riak-test-key.pem"
    for file in $security_cacert_file $security_cert_file $security_key_file
    do
        if [[ ! -f $file  ]]
        then
            errexit "missing security file: $file"
        fi
    done
fi

declare -r dev_cluster_path="${opt_dev_cluster_path:-$default_dev_cluster_path}"

if [[ $opt_strong_consistency == 'true' ]]
then
    declare -ir node_count=$strong_consistency_node_count
    if (( opt_node_count > node_count ))
    then
        node_count=opt_node_count
    fi
else
    declare -ir node_count="${opt_node_count:-$default_node_count}"
fi

if [[ -d $dev_cluster_path ]]
then
    pinfo "Setting up dev cluster in $dev_cluster_path with $node_count nodes"
else
    errexit "Dev cluster path $dev_cluster_path does not exist!"
fi

if [[ $opt_strong_consistency == 'true' ]]
then
    pinfo 'Setting up dev cluster with Strong Consistency'
fi

if [[ $opt_legacy_search == 'true' ]]
then
    pinfo "Setting up dev cluster with Legacy Search"
fi

pushd $dev_cluster_path > /dev/null

for ((i = 1; i <= node_count; ++i))
do
    dev_node_path="dev$i"
    if [[ ! -d $dev_node_path ]]
    then
        errexit "Dev node directory $dev_node_path does not exist!"
    fi
done

pinfo "Stopping Riak"

set +o errexit
for devdir in dev*
do
    $devdir/bin/riak stop > /dev/null
done

pinfo "Removing old Riak data"

for datadir in dev*/data/*
do
    find $datadir -type f -delete
done
for logdir in dev*/log
do
    find $logdir -type f -delete
done
for yz_temp in dev*/data/yz_temp
do
    rm -rf $yz_temp
done
set -o errexit

if [[ $opt_cleanup_only == 'true' ]]; then
    exit 0;
fi

declare -i pb_port=10017
declare -i http_port=10018
declare -i https_port=10418

pinfo "Configuring riak.conf"

for ((i = 1; i <= node_count; ++i))
do
    devdir="dev$i"

    adv_conf="$devdir/etc/advanced.config"
    riak_conf="$devdir/etc/riak.conf"
    riak_conf_orig="$devdir/etc/riak.conf.orig"
    if [[ -f $riak_conf_orig ]]
    then
        cp -f $riak_conf_orig $riak_conf
    else
        cp -f $riak_conf $riak_conf_orig
    fi

    if [[ $opt_use_security == 'true' ]]
    then
        gen-riak-conf "$riak_conf" $http_port $pb_port $https_port "$security_cacert_file" "$security_cert_file" "$security_key_file" "$default_backend"
    else
        gen-riak-conf "$riak_conf" $http_port $pb_port 0 '' '' '' "$default_backend"
    fi

    gen-adv-conf $adv_conf

    if [[ $opt_legacy_search == 'true' ]]
    then
        legacy-search-conf $riak_conf $adv_conf
    fi

    if [[ $opt_strong_consistency == 'true' ]]
    then
        strong-consistency-conf $riak_conf
    fi

    (( pb_port += 10 ))
    (( http_port += 10 ))
    (( https_port += 10 ))
done

pinfo "Starting Riak"

function maybe_sleep
{
    if (( opt_delay_riak_ops > 0 ))
    then
        pinfo_n "Sleeping $opt_delay_riak_ops seconds..."
        sleep $opt_delay_riak_ops
        echo 'done.'
    fi
}

for ((i = 1; i <= node_count; ++i))
do
    devdir="dev$i"
    $devdir/bin/riak start
    pinfo "Starting $devdir"
    maybe_sleep
done

for ((i = 2; i <= node_count; ++i))
do
    devdir="dev$i"
    $devdir/bin/riak-admin cluster join dev1@127.0.0.1
    pinfo "Joining $devdir"
    maybe_sleep
done

$riak_admin cluster plan
$riak_admin cluster commit
$riak_admin transfer-limit 16

wait_for_transfers

pinfo "Riak started, setting up bucket types"
riak-cluster-config "$riak_admin" 10018 "$opt_strong_consistency" "$opt_use_security"
pinfo "Done!"

